1、反向输出链表——堆栈实现
2、定义：LIFO；数据结构；元素只能从一端增加和删除
3、只能在非空的堆栈中删除和/或检索元素；
   只有在堆栈未满的情况下才能增加元素；
   堆栈初次使用时，必须为空；
4、堆栈基本操作
   1）initializeStack：将堆栈初始化为空
   2）isEmptyStack：检查堆栈是否为空。是-->返回true；否-->返回false
   3）isFullStack：检查堆栈是否已满。是-->返回true；否-->返回false
   4）push：添加新元素到站定；输入参数-->堆栈+新元素；操作之前，检查堆栈存在且未满
   5）top：返回栈顶元素；操作之前，检查堆栈存在且非空
   6）pop：删除栈顶元素；操作之前，检查堆栈存在且非空
5、堆栈异常类：（堆栈溢出异常+堆栈下溢异常）
   StackUnderflowException：在堆栈为空的情况下实现pop操作(删除元素)
   StackOverflowException：在堆栈已满的情况下实现push操作(添加元素)
6、使用数组实现堆栈(对堆栈的操作类似于对ArrayListClass的操作)
   1）初始化堆栈：
     stackTop的值为堆栈中元素的数目，初始化为0；
     stackTop-1为栈顶元素的位置；
     初始化数组元素定义为空/0；
7、使用链表实现堆栈
   1）原由：数组大小固定，在堆栈的数组（线性）表示中，只有固定数目的元素能压入堆栈，如果堆栈元素数目
   超过数组的大小，程序就可能会出错而终止执行。所以使用引用变量动态分配内存空间，使用链表动态组织
   数据（比如有序表）
   2）stackTop提供一个节点的引用，该节点的info包含栈顶元素的引用
   3）定义为ADT

